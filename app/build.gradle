plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'

    id("com.google.devtools.ksp")
    //Doc
    id("org.jetbrains.dokka") version "1.9.10" apply false
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { stream ->
        localProperties.load(stream)
    }
}
//def apiRppsUrl = "\"${localProperties['apiRppsUrl'].toString()}\""

android {
    compileSdk 34

    defaultConfig {
        applicationId "dev.mobile.medicalink"
        minSdk 23
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def apiRppsUrl = "\"${properties['apiRppsUrl'].toString()}\""
        debug {
            buildConfigField 'String', "API_RPPS_URL", apiRppsUrl.toString()
        }
        release {
            buildConfigField 'String', "API_RPPS_URL", apiRppsUrl.toString()
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    namespace 'dev.mobile.medicalink'

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    testImplementation("org.robolectric:robolectric:4.11.1")


    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.mlkit:text-recognition:16.0.0'
    implementation 'androidx.biometric:biometric-ktx:1.2.0-alpha05'
    implementation 'androidx.test:core-ktx:1.5.0'
    implementation "org.mongodb:mongodb-driver-sync:4.3.0"

    implementation "androidx.room:room-runtime:2.6.1"
    implementation 'androidx.test:runner:1.5.2'
    implementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    ksp "androidx.room:room-compiler:2.6.1"
    implementation "androidx.room:room-ktx:2.6.1"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.7.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.7.0"

    testImplementation 'junit:junit:4.13.2'
    testImplementation("androidx.test:core-ktx:1.5.0")
    testImplementation("androidx.test.ext:junit-ktx:1.1.5")

    androidTestImplementation("org.robolectric:robolectric:4.11.1")
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "com.google.truth:truth:1.4.1"
    androidTestImplementation "android.arch.core:core-testing:1.1.1"
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'

    // PyTorch
    implementation("org.pytorch:pytorch_android:2.1.0")

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

//Coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.7.0"
}
